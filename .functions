function notify() {
  msg=${*:-`cat`}
  if [[ $(uname) == "Darwin" ]]; then
    /usr/bin/osascript -e "display notification \"$msg\""
  elif [[ $(which powershell.exe) ]]; then
    toast=$(which toast64.exe)
    if [[ ! -f $toast ]]; then
      toast=$(which toast32.exe)
    fi

    $toast --app-id "Shell notification" \
      --title "Shell notification" \
      --message "$msg" \
      --audio "default"
  elif [[ $(uname) == "Linux" ]]; then
    notify-send "$msg"
  fi
}

# git worktree add for an sdk-nrf branch and initialize it
# Usage: ngwa <branch-name>
# Branch will be created if it doesn't exist already.
# If the branch name starts with pr-, it will fetch the pull request branch from upstream.
# Creates a worktree at ${NCS_WT_PATH}/<branch-name>/nrf
function ngwa() {
  if [[ -z $1 ]] ; then
    echo "Missing branch argument"
    return 1
  fi

  if [[ -z $NCS_WT_PATH ]] ; then
    echo "NCS_WT_PATH is empty"
    return 1
  fi

  # check if folder ${NCS_WT_PATH} exists
  if [[ ! -d $NCS_WT_PATH ]] ; then
    echo "$NCS_WT_PATH does not exist"
    return 1
  fi

  if [[ $1 == pr-* ]] ; then
    echo "Fetching pull request branch"
    pr_number=$(echo $1 | cut -c 4-)

    # fetch the PR branch
    git -C ${NCS_PATH}/nrf fetch upstream pull/${pr_number}/head:$1

    # make sure the PR branch is up to date
    git -C ${NCS_PATH}/nrf update-ref refs/heads/$1 FETCH_HEAD

    # configure the branch so git pull works
    git -C ${NCS_PATH}/nrf config branch.$1.remote upstream
    git -C ${NCS_PATH}/nrf config branch.$1.merge refs/pull/${pr_number}/head
  fi

  git -C ${NCS_PATH}/nrf worktree add ${NCS_WT_PATH}/$1/nrf $1

  # error code is returned if branch does not exist already
  # create new branch if error code is returned
  if [[ $? -ne 0 ]] ; then
    git -C ${NCS_PATH}/nrf worktree add -b $1 ${NCS_WT_PATH}/$1/nrf

    if [[ $? -ne 0 ]] ; then
      echo "Failed to create worktree"
      return
    fi
  fi

  cp $HOME/.wtdotenv ${NCS_WT_PATH}/$1/.env
  python3 -m venv ${NCS_WT_PATH}/$1/.venv
  cd ${NCS_WT_PATH}/$1
  pip3 install west
  cd ${NCS_WT_PATH}/$1/nrf
  west init -l
  west update --narrow -o=--depth=1
  cd ${NCS_WT_PATH}/$1
  west zephyr-export
  pip3 install -r zephyr/scripts/requirements.txt
  pip3 install -r nrf/scripts/requirements.txt
  pip3 install -r bootloader/mcuboot/scripts/requirements.txt
  cd nrf
}

# nrf git worktree remove and delete the parent folder
function ngwr() {
  # validate arguments to avoid rm -rf /
  if [[ -z $1 ]] ; then
    echo "Missing worktree path argument"
    return
  fi

  if [[ -z $NCS_WT_PATH ]] ; then
    echo "NCS_WT_PATH is empty"
    return
  fi

  # promt user to comfirm deletion in zsh
  read -q "REPLY?Do you want to remove the worktree at ${NCS_WT_PATH}/$1? (y/n) "
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
    echo "Aborting"
    return
  fi

  git -C ${NCS_PATH}/nrf worktree remove -f "${NCS_WT_PATH}/${1}/nrf"
  rm -rf "${NCS_WT_PATH}/${1}"
}

# cd to nrf folder in ncs or worktree
function ncd() {
  if [[ -z $1 ]] ; then
    # first cd to the ncs folder to activate .env
    cd ${NCS_PATH}/
    # then cd back to the previous folder to allow cd - to work after cd to nrf
    cd -
    # finally cd to nrf folder
    cd ${NCS_PATH}/nrf
    return
  fi

  if [[ ! -d ${NCS_WT_PATH}/$1 ]] ; then
    echo "The worktree ${NCS_WT_PATH}/$1 does not exist"
    return 1
  fi

  # first cd to the worktree ncs folder to activate .env
  cd ${NCS_WT_PATH}/$1
  cd nrf
}

# generic function to run a command in the zephyr docker container
function zd() {
  if [[ -z $1 ]] ; then
    echo "Missing twister command"
    return 1
  fi

  if [[ -z $ZEPHYR_BASE ]] ; then
    echo "ZEPHYR_BASE is empty"
    return 1
  fi

  prj_root=$(realpath $ZEPHYR_BASE/..)/
  rel_cwd=${PWD#$prj_root}

  docker run --rm -t -v ${prj_root}:/workdir -w /workdir/${rel_cwd} dotfiles $*
}

# zephyr docker interactive shell
function zdi() {
  if [[ -z $ZEPHYR_BASE ]] ; then
    echo "ZEPHYR_BASE is empty"
    return 1
  fi

  prj_root=$(realpath $ZEPHYR_BASE/..)/
  rel_cwd=${PWD#$prj_root}

  docker run --rm -it -v ${prj_root}:/workdir -w /workdir/${rel_cwd} dotfiles /bin/bash
}

function a2l() {
  if [[ -z $ZEPHYR_TOOLCHAIN_PATH ]] ; then
    echo "ZEPHYR_TOOLCHAIN_PATH is empty"
    return 1
  fi

  if [[ ! -d $ZEPHYR_TOOLCHAIN_PATH/arm-zephyr-eabi/bin ]] ; then
    echo "arm-zephyr-eabi/bin does not exist in $ZEPHYR_TOOLCHAIN_PATH"
    return 1
  fi

  elf_path="build/zephyr/zephyr.elf"

  # include app name in elf_path if sysbuild was used to build
  if [[ -f build/domains.yaml ]] ; then
    app_name=$(grep 'default:' build/domains.yaml | cut -d ' ' -f 2)
    elf_path="build/${app_name}/zephyr/zephyr.elf"
  fi

  $ZEPHYR_TOOLCHAIN_PATH/arm-zephyr-eabi/bin/arm-zephyr-eabi-addr2line -e $elf_path $*
}

# nrfcloud related

function nrfcloud-delete-device() {
  device_id=$1
  device_ownership_code=$2

  if [[ -z $NRF_CLOUD_API_KEY ]] ; then
    echo "NRF_CLOUD_API_KEY is empty"
    return 1
  fi

  if [[ -z $device_id ]] ; then
    echo "Missing device id"
    echo "Usage: nrfcloud-delete-device <device-id> <device-ownership-code>"
    return 1
  fi

  if [[ -z $device_ownership_code ]] ; then
    echo "Missing device ownership code"
    echo "Usage: nrfcloud-delete-device <device-id> <device-ownership-code>"
    return 1
  fi

  curl -X DELETE https://api.nrfcloud.com/v1/devices/$device_id \
    -d $device_ownership_code \
    -H "Authorization: Bearer $NRF_CLOUD_API_KEY" \
    -H "Content-Type: text/plain"
}

function nrfcloud-create-device-cert() {
  device_id=$1
  device_ownership_code=$2

  if [[ -z $NRF_CLOUD_API_KEY ]] ; then
    echo "NRF_CLOUD_API_KEY is empty"
    return 1
  fi

  if [[ -z $device_id ]] ; then
    echo "Missing device id"
    echo "Usage: nrfcloud-delete-device <device-id> <device-ownership-code>"
    return 1
  fi

  if [[ -z $device_ownership_code ]] ; then
    echo "Missing device ownership code"
    echo "Usage: nrfcloud-delete-device <device-id> <device-ownership-code>"
    return 1
  fi

  curl -X POST https://api.nrfcloud.com/v1/devices/$device_id/certificates \
    -d "$device_ownership_code" \
    -H "Authorization: Bearer $NRF_CLOUD_API_KEY" \
    -H "Content-Type: text/plain" \
    -o "$device_id.cert.json" \
    -f

  if [[ $? -ne 0 ]] ; then
    echo "Failed to create device certificate"
    return 1
  else
    echo "Device certificate stored to $device_id.cert.json"
  fi
}

function nrfcloud-associate-device() {
  device_id=$1
  device_ownership_code=$2

  if [[ -z $NRF_CLOUD_API_KEY ]] ; then
    echo "NRF_CLOUD_API_KEY is empty"
    return 1
  fi

  if [[ -z $device_id ]] ; then
    echo "Missing device id"
    echo "Usage: nrfcloud-delete-device <device-id> <device-ownership-code>"
    return 1
  fi

  if [[ -z $device_ownership_code ]] ; then
    echo "Missing device ownership code"
    echo "Usage: nrfcloud-delete-device <device-id> <device-ownership-code>"
    return 1
  fi

  curl -X PUT https://api.nrfcloud.com/v1/association/$device_id \
    -d "$device_ownership_code" \
    -H "Authorization: Bearer $NRF_CLOUD_API_KEY" \
    -H "Content-Type: text/plain"
}

function install-device-certs() {
  device_path=$1
  cert_file=$2
  sec_tag=${3:-16842753}

  if [[ -z $device_path ]] ; then
    echo "Missing device path"
    echo "Usage: install-device-certs <device-path> <cert-file> [sec-tag]"
    return 1
  fi

  if [[ -z $cert_file ]] ; then
    echo "Missing cert file"
    echo "Usage: install-device-certs <device-path> <cert-file> [sec-tag]"
    return 1
  fi

  if [[ ! -c $device_path ]] ; then
    echo "$device_path is not a character device"
    return 1
  fi

  if [[ ! -f $cert_file ]] ; then
    echo "$cert_file does not exist"
    return 1
  fi

  cat $cert_file | jq -r .clientCert > $cert_file.client.pem
  cat $cert_file | jq -r .privateKey > $cert_file.key.pem
  cat $cert_file | jq -r .caCert > $cert_file.ca.pem

  # delete old certs
  nrfcredstore $device_path delete $sec_tag ROOT_CA_CERT
  nrfcredstore $device_path delete $sec_tag CLIENT_CERT
  nrfcredstore $device_path delete $sec_tag CLIENT_KEY

  # install new certs
  nrfcredstore $device_path write $sec_tag ROOT_CA_CERT $cert_file.ca.pem
  nrfcredstore $device_path write $sec_tag CLIENT_CERT $cert_file.client.pem
  nrfcredstore $device_path write $sec_tag CLIENT_KEY $cert_file.key.pem

  echo "Device certificates installed in $sec_tag"
}

# switch between aws profiles and set environment variables
awsp() {
  export AWS_REGION=us-east-1
  export NRFCLOUD_ENV=$1
  export AWS_PROFILE=$1
  export STAGE=$1
}